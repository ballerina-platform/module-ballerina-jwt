/*
 * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * WSO2 Inc. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

import org.apache.tools.ant.taskdefs.condition.Os

plugins {
    id 'io.ballerina.plugin'
}

description = 'Ballerina - JWT Ballerina Generator'

def packageName = "jwt"
def packageOrg = "ballerina"
def tomlVersion = stripBallerinaExtensionVersion("${project.version}")
def ballerinaTomlFile = new File("$project.projectDir/Ballerina.toml")
def ballerinaTomlFilePlaceHolder = new File("${project.rootDir}/build-config/resources/Ballerina.toml")
def compilerPluginTomlFilePlaceHolder = new File("${project.rootDir}/build-config/resources/CompilerPlugin.toml")
def compilerPluginTomlFile = new File("$project.projectDir/CompilerPlugin.toml")

def stripBallerinaExtensionVersion(String extVersion) {
    if (extVersion.matches(project.ext.timestampedVersionRegex)) {
        def splitVersion = extVersion.split('-')
        if (splitVersion.length > 3) {
            def strippedValues = splitVersion[0..-4]
            return strippedValues.join('-')
        } else {
            return extVersion
        }
    } else {
        return extVersion.replace("${project.ext.snapshotVersion}", "")
    }
}

ballerina {
    packageOrganization = packageOrg
    module = packageName
    langVersion = ballerinaLangVersion
}

tasks.register('updateTomlFiles') {
    doLast {
        def newBallerinaToml = ballerinaTomlFilePlaceHolder.text.replace("@project.version@", project.version)
        def newCompilerPluginToml = compilerPluginTomlFilePlaceHolder.text.replace("@project.version@", project.version)
        newBallerinaToml = newBallerinaToml.replace("@toml.version@", tomlVersion)
        ballerinaTomlFile.text = newBallerinaToml
        compilerPluginTomlFile.text = newCompilerPluginToml
    }
}

tasks.register('commitTomlFiles') {
    doLast {
        project.exec {
            ignoreExitValue true
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'cmd', '/c', "git commit -m \"[Automated] Update the native jar versions\" Ballerina.toml Dependencies.toml CompilerPlugin.toml"
            } else {
                commandLine 'sh', '-c', "git commit -m '[Automated] Update the native jar versions' Ballerina.toml Dependencies.toml CompilerPlugin.toml"
            }
        }
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            artifact source: createArtifactZip, extension: 'zip'
        }
    }
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/ballerina-platform/module-${packageOrg}-${packageName}")
            credentials {
                username = System.getenv("publishUser")
                password = System.getenv("publishPAT")
            }
        }
    }
}

tasks.register('startBallerinaSTS') {
    doLast {
        // This check is added to prevent starting the server in Windows OS, since the Docker image does not support
        // for Windows OS.
        if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
            def stdOut = new ByteArrayOutputStream()
            exec {
                commandLine 'sh', '-c', "docker ps --filter name=ballerina-sts"
                standardOutput = stdOut
            }
            if (!stdOut.toString().contains("ballerina-sts")) {
                println "Starting Ballerina STS."
                exec {
                    commandLine 'sh', '-c', "docker run --rm -d -p 9445:9445 -p 9444:9444 --name ballerina-sts ldclakmal/ballerina-sts:latest"
                    standardOutput = stdOut
                }
                println stdOut.toString()
                println "Waiting 10s until the Ballerina STS get initiated."
                sleep(15 * 1000)
            } else {
                println "Ballerina STS is already started."
            }
        }
    }
}
startBallerinaSTS.onlyIf { !project.gradle.startParameter.excludedTaskNames.contains('test') }

tasks.register('stopBallerinaSTS') {
    doLast {
        // This check is added to prevent trying to stop the server in Windows OS, since the Docker image not started
        // in Windows OS.
        if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
            def stdOut = new ByteArrayOutputStream()
            exec {
                commandLine 'sh', '-c', "docker ps --filter name=ballerina-sts"
                standardOutput = stdOut
            }
            if (stdOut.toString().contains("ballerina-sts")) {
                println "Stopping Ballerina STS."
                exec {
                    commandLine 'sh', '-c', "docker stop ballerina-sts"
                    standardOutput = stdOut
                }
                println stdOut.toString()
                println "Waiting 15s until the Ballerina STS get stopped."
                sleep(15 * 1000)
            } else {
                println "Ballerina STS is not started."
            }
        }
    }
}
stopBallerinaSTS.onlyIf { !project.gradle.startParameter.excludedTaskNames.contains('test') }

updateTomlFiles.dependsOn copyStdlibs


test.finalizedBy stopBallerinaSTS
test.dependsOn startBallerinaSTS
test.dependsOn ":${packageName}-native:build"
test.dependsOn ":${packageName}-compiler-plugin:build"

build.dependsOn ":${packageName}-compiler-plugin:build"
build.dependsOn "generatePomFileForMavenPublication"
build.finalizedBy stopBallerinaSTS
build.dependsOn startBallerinaSTS
build.dependsOn ":${packageName}-native:build"

publishToMavenLocal.dependsOn build
publish.dependsOn build
